// src/display/font.rs
// Manually generated font data and rendering functions
use embedded_graphics::pixelcolor::Rgb565;

// Define an 8x12 blocky font bitmaps
const FONT_8X12_BITMAPS: [[u8; 12]; 16] = [
    // '0' (8x12)
    [
        0b01111110, // ######
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01111110, // ######
    ],
    // '1' (8x12)
    [
        0b00011000, // ..##..
        0b00111000, // .###..
        0b00011000, // ..##..
        0b00011000, // ..##..
        0b00011000, // ..##..
        0b00011000, // ..##..
        0b00011000, // ..##..
        0b00011000, // ..##..
        0b00011000, // ..##..
        0b00011000, // ..##..
        0b00011000, // ..##..
        0b01111110, // ######
    ],
    // '2' (8x12)
    [
        0b01111110, // ######
        0b01000010, // #....#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b01111110, // ######
        0b01000000, // #......
        0b01000000, // #......
        0b01000000, // #......
        0b01000000, // #......
        0b01000000, // #......
        0b01111110, // ######
    ],
    // '3' (8x12)
    [
        0b01111110, // ######
        0b01000010, // #....#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b01111110, // ######
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b01000010, // #....#
        0b01111110, // ######
    ],
    // '4' (8x12)
    [
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01111110, // ######
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
    ],
    // '5' (8x12)
    [
        0b01111110, // ######
        0b01000000, // #......
        0b01000000, // #......
        0b01000000, // #......
        0b01000000, // #......
        0b01111110, // ######
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b01000010, // #....#
        0b01111110, // ######
    ],
    // '6' (8x12)
    [
        0b01111110, // ######
        0b01000000, // #......
        0b01000000, // #......
        0b01000000, // #......
        0b01000000, // #......
        0b01111110, // ######
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01111110, // ######
    ],
    // '7' (8x12)
    [
        0b01111110, // ######
        0b01000010, // #....#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
    ],
    // '8' (8x12)
    [
        0b01111110, // ######
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01111110, // ######
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01111110, // ######
    ],
    // '9' (8x12)
    [
        0b01111110, // ######
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01111110, // ######
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b00000010, // ......#
        0b01000010, // #....#
        0b01111110, // ######
    ],
    // '.' (8x12)
    [
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00011000, // ..##....
        0b00011000, // ..##....
    ],
    // '-' (8x12)
    [
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b01111110, // ######
        0b01111110, // ######
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
    ],
    // 'V' (8x12) - Simple V
    [
        0b10000010, // #.....#
        0b10000010, // #.....#
        0b10000010, // #.....#
        0b10000010, // #.....#
        0b10000010, // #.....#
        0b01000100, // .#...#
        0b01000100, // .#...#
        0b01000100, // .#...#
        0b00101000, // ..#.#
        0b00101000, // ..#.#
        0b00010000, // ...#
        0b00010000, // ...#
    ],
    // 'W' (8x12) - Simple W
    [
        0b10000010, // #.....#
        0b10000010, // #.....#
        0b10000010, // #.....#
        0b10000010, // #.....#
        0b10000010, // #.....#
        0b10101010, // #.#.#.#
        0b10101010, // #.#.#.#
        0b10101010, // #.#.#.#
        0b01111100, // .#####.
        0b01111100, // .#####.
        0b00100100, // ..#..#
        0b00100100, // ..#..#
    ],
    // 'A' (8x12) - Blocky A
    [
        0b00111100, // .####.
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01111110, // ######
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
        0b01000010, // #....#
    ],
    // ' ' (Space) - All OFF
    [
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
        0b00000000, // ........
    ],
];

// Mapping from character to index in FONT_8X12_BITMAPS
const FONT_MAP: &[(char, usize)] = &[
    ('0', 0),
    ('1', 1),
    ('2', 2),
    ('3', 3),
    ('4', 4),
    ('5', 5),
    ('6', 6),
    ('7', 7),
    ('8', 8),
    ('9', 9),
    ('.', 10),
    ('-', 11),
    ('V', 12),
    ('W', 13),
    ('A', 14),
    (' ', 15),
];

// Function to get the monochrome bitmap for a character using the map
// Returns Option<&'static [u16; 12]> where each u16 is a row, bits 0-7 are pixels.
pub fn char_to_mono_bitmap(c: char) -> Option<&'static [u8; 12]> {
    FONT_MAP
        .iter()
        .find(|(key, _)| *key == c)
        .map(|(_, index)| &FONT_8X12_BITMAPS[*index]) // Corrected bitmap name
}

// Function to convert a monochrome bitmap to an RGB565 pixel array
// Takes the monochrome bitmap, foreground color, background color, and an output buffer.
// Writes the RGB565 pixel data into the buffer.
// The buffer must be large enough: FONT_8X12_WIDTH * FONT_8X12_HEIGHT * size_of::<Rgb565>() bytes.
pub fn mono_bitmap_to_rgb565(
    bitmap: &[u8; FONT_8X12_HEIGHT], // Changed to u8
    fg_color: Rgb565,
    bg_color: Rgb565,
    output_buffer: &mut [Rgb565], // Size 8 * 12 = 96
) {
    let output_width = FONT_8X12_WIDTH; // 8
    let output_height = FONT_8X12_HEIGHT; // 12

    let mut buffer_idx = 0;
    for col_idx in 0..output_width {
        // Iterate over the 8 columns
        for row_idx in 0..output_height {
            // Iterate over the 12 rows
            let row_bitmap = bitmap[row_idx];
            // Check if the pixel is set in the monochrome bitmap (using 8 bits)
            if (row_bitmap >> (output_width - 1 - col_idx)) & 1 == 1 {
                // Check bit from MSB side
                output_buffer[buffer_idx] = fg_color;
            } else {
                output_buffer[buffer_idx] = bg_color;
            }
            buffer_idx += 1;
        }
    }
}

// Define font dimensions
pub const FONT_8X12_WIDTH: usize = 8;
pub const FONT_8X12_HEIGHT: usize = 12;
